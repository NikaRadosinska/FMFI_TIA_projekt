[{"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/index.js":"1","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/reportWebVitals.js":"2","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/App.js":"3","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/SongCard.js":"4"},{"size":790,"mtime":1679498045511,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1679414982637,"results":"7","hashOfConfig":"6"},{"size":13639,"mtime":1680377007350,"results":"8","hashOfConfig":"6"},{"size":549,"mtime":1679415620117,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"w7vjyh",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/index.js",["21"],"import React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:3000/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n\nroot.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["22","23"],"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/reportWebVitals.js",[],"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/App.js",["24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45"],"import logo from './logo.svg';\nimport './App.css';\nimport { useQuery, gql, useLazyQuery, useMutation } from '@apollo/client';\nimport React, { useEffect, useState } from 'react'\nimport SongCard from './SongCard';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\n\nconst initialState = {\n  isLoading: true,\n  usernames: []\n}\n\nconst GET_BOOK_ONE = gql`\n    query bookDetails {\n      bookById(id: \"book-1\") {\n        id\n        name\n        pageCount\n        author {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n`;\n\nconst GET_ALL_USERNAMES = gql`\nquery allUsernames {\n  getAllUserNames\n}\n`;\nconst GET_USER_IF_CORRECT_PASSWORD = gql`\nquery getUserIfCorrectPassword($userName: String!, $password: String!) {\n  userIfCorrectPassword(userName: $userName, password: $password){\n    id\n    userName\n    password\n    isAdmin\n  }\n}\n`;\n\nconst ADD_USER = gql`\nmutation getAddUser($userName: String!, $password: String!) {\n  addUser(userName: $userName, password: $password){\n    id\n    userName\n    password\n    isAdmin\n  }\n}\n`;\n\nconst GET_FRIENDS = gql`\nquery getFriends($id: Int!) {\n  getFriends(id: $id)\n}\n`;\n\nconst GET_GROUPS = gql`\nquery getUsersGroups($id: Int!) {\n  getUsersGroups(id: $id){\n    id\n    name\n  }\n}\n`;\n\nconst ADD_FRIEND = gql`\nmutation addFriend($id: Int!, $username: String!) {\n  addFriend(id: $id, username: $username)\n}\n`;\n\nconst REMOVE_FRIEND = gql`\nmutation removeFriend($id: Int!, $username: String!) {\n  removeFriend(id: $id, username: $username)\n}\n`;\n\n\n\nfunction DisplayBook() {\n  const { loading, error, data } = useQuery(GET_BOOK_ONE);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error : {error.message}</p>;\n  console.log(data.bookById);\n  return (\n    <div key={data.bookById.id}>\n      <h3>{data.bookById.name}</h3>\n      <br />\n      <b>About this book:</b>\n      <p>page count:{data.bookById.pageCount}, author: {data.bookById.author.firstName} {data.bookById.author.lastName}</p>\n      <br />\n    </div>\n  );\n}\n\n\nfunction InitialData() {\n  //ENUMS\n  const errors = {\n    wrongUsername: \"invalid username\",\n    wrongPassword: \"invalid password\",\n    waitForResponseAboutPassword: \"wait\",\n    usedUsername: \"username is already used\",\n    differentControlPassword: \"second password is not the same\",\n    waitForResponseAboutAddUser: \"wait\",\n    noSuchUser: \"no existing user with such username\",\n    yourUsername: \"you can not add yourself as a friend\",\n    notYourFriend: \"user is not in your fiend list\",\n    alreadyYourFriend: \"user is already your friend\",\n    userAlreadyInGroup: \"user is already in group\"\n  };\n\n  //STATES\n  const [isLoginForm, setIsLoginForm] = useState(true);\n  const [toReloadFriends, setToReloadFriends] = useState(false);\n  const [errorMessages, setErrorMessages] = useState({});\n  const { loading, error, data } = useQuery(GET_ALL_USERNAMES);\n  const [getUserByPassword, { loading: loadingUser, error: errorUser, data: dataUser }] = useLazyQuery(GET_USER_IF_CORRECT_PASSWORD);\n  const [getAddUserData, { loading: loadingAddUser, error: errorAddUser, data: dataAddUser }] = useMutation(ADD_USER);\n  const [getFriends, { loading: loadingFriends, error: errorFriends, data: dataFriends, refetch: refetchFriends }] = useLazyQuery(GET_FRIENDS);\n  const [getGroups, { loading: loadingGroups, error: errorGroups, data: dataGroups }] = useLazyQuery(GET_GROUPS);\n  const [getAddFriend, { loading: loadingAddFriend, error: errorAddFriend, data: dataAddFriend }] = useMutation(ADD_FRIEND);\n  const [getRemoveFriend, { loading: loadingRemoveFriend, error: errorRemoveFriend, data: dataRemoveFriend }] = useMutation(REMOVE_FRIEND);\n  const isEnteredPassword = loadingUser === false && dataUser != undefined;\n  const isEnteredCorrectPassword = isEnteredPassword && dataUser.userIfCorrectPassword != null;\n  const isSignin = loadingAddUser == false && dataAddUser;\n\n\n  //HANDLERS\n  const HandleChangeLoginSigin = (event) => {\n    //event.preventDefault();\n    console.log(\"change form\");\n    if (!isLoginForm) window.location.reload(false);\n    else setIsLoginForm(!isLoginForm);\n  }\n\n  const HandleSigninFormSubmit = (event) => {\n    event.preventDefault();\n    console.log(document.forms);\n    var { uname, passOne, passTwo } = document.forms[0];\n    const userData = data.getAllUserNames.find((user) => user === uname.value);\n    if (userData) {\n      setErrorMessages({ name: \"usedUsername\", message: errors.usedUsername });\n    }\n    else {\n      if (passOne.value === passTwo.value) {\n        getAddUserData({ variables: { userName: uname.value, password: passOne.value } });\n      }\n      else {\n        setErrorMessages({ name: \"differentControlPassword\", message: errors.differentControlPassword });\n      }\n    }\n  }\n\n  const HandleLoginFormSubmit = (event) => {\n    event.preventDefault();\n    var { uname, pass } = document.forms[0];\n\n    const userData = data.getAllUserNames.find((user) => user === uname.value);\n\n    if (userData) {\n      console.log(\"Should be set\" + uname.value + \" \" + pass.value);\n      getUserByPassword({ variables: { userName: uname.value, password: pass.value } });\n    } else {\n      setErrorMessages({ name: \"wrongUsername\", message: errors.wrongUsername });\n    }\n  }\n\n  const HandleAddFriend = (event) => {\n    event.preventDefault();\n    var { username } = document.forms[0];\n\n    const userData = data.getAllUserNames.find((user) => user === username.value);\n    if (userData) {\n      if (userData == dataUser.userIfCorrectPassword.userName) {\n        setErrorMessages({ name: \"yourUsername\", message: errors.yourUsername });\n      }\n      else if (dataFriends.getFriends.find((user) => user === username.value)) {\n        setErrorMessages({ name: \"alreadyYourFriend\", message: errors.alreadyYourFriend });\n      }\n      else {\n        getAddFriend({ variables: { id: dataUser.userIfCorrectPassword.id, username: username.value } });\n        setToReloadFriends(true);\n      }\n    }\n    else {\n      setErrorMessages({ name: \"noSuchUser\", message: errors.noSuchUser });\n    }\n  }\n\n  const HandleAddUserToGroup = (event) => {\n    event.preventDefault();\n    var { group, username } = document.forms[2];\n\n    \n  }\n\n  const HandleRemoveFriend = (event) => {\n    event.preventDefault();\n    var { username } = document.forms[1];\n    console.log(username.value);\n    const userData = dataFriends.getFriends.find((user) => user === username.value);\n    console.log(userData);\n    if (userData) {\n      getRemoveFriend({ variables: { id: dataUser.userIfCorrectPassword.id, username: username.value } });\n      setToReloadFriends(true);\n    }\n    else {\n      setErrorMessages({ name: \"notYourFriend\", message: errors.notYourFriend });\n    }\n  }\n\n  //HTML RETURN_FUNCTIONS/VARIABLES\n  const renderErrorMessage = (name) =>\n    name === errorMessages.name && (\n      <div className=\"error\">{errorMessages.message}</div>\n    );\n\n  const renderLoginForm = (\n    <div className=\"LoginForm\">\n      <form onSubmit={HandleLoginFormSubmit}>\n        {renderErrorMessage(\"waitForResponseAboutPassword\")}\n        <div className=\"input-container\">\n          <label>Username </label>\n          <input type=\"text\" name=\"uname\" required />\n          {renderErrorMessage(\"wrongUsername\")}\n        </div>\n        <div className=\"input-container\">\n          <label>Password </label>\n          <input type=\"password\" name=\"pass\" required />\n          {renderErrorMessage(\"wrongPassword\")}\n        </div>\n        <div className=\"button-container\">\n          <input type=\"submit\" />\n        </div>\n      </form>\n    </div>\n  );\n\n  const renderSigninForm = (\n    <div className=\"SigninForm\">\n      <form onSubmit={HandleSigninFormSubmit}>\n        {renderErrorMessage(\"waitForResponseAboutAddUser\")}\n        <div className=\"input-container\">\n          <label>Username </label>\n          <input type=\"text\" name=\"uname\" required />\n          {renderErrorMessage(\"usedUsername\")}\n        </div>\n        <div className=\"input-container\">\n          <label>Password </label>\n          <input type=\"password\" name=\"passOne\" required />\n        </div>\n        <div className=\"input-container\">\n          <label>Password second time</label>\n          <input type=\"password\" name=\"passTwo\" required />\n          {renderErrorMessage(\"differentControlPassword\")}\n        </div>\n        <div className=\"button-container\">\n          <input type=\"submit\" />\n        </div>\n      </form>\n    </div>\n  );\n\n  const renderUserIsLoginComponent = (\n    <div key=\"userIsLoginComponent\" className=\"user-is-login\">\n      <div>User is successfully logged in</div>\n      <div key=\"friendPart\" className='friends-part'>\n        <h3>Your Friends:</h3>\n        {\n          (loadingFriends || !dataFriends) ? (<p>Loading...</p>) : ((errorFriends) ? (<p>Error : {errorFriends.message}</p>) : (dataFriends.getFriends.map(name =>\n            <p>{name}</p>\n          )))\n        }\n        <h4>Manage Your Friends</h4>\n        <div className=\"addFriendForm\">\n          <form onSubmit={HandleAddFriend}>\n            <label>add user: </label>\n            <input type=\"text\" name=\"username\" required />\n            {renderErrorMessage(\"noSuchUser\")}\n            {renderErrorMessage(\"yourUsername\")}\n            {renderErrorMessage(\"alreadyYourFriend\")}\n            <div className=\"button-container\">\n              <input type=\"submit\" />\n            </div>\n          </form>\n        </div>\n        <div className=\"removeFriendForm\">\n          <form onSubmit={HandleRemoveFriend}>\n            <label>remove friend: </label>\n            <input type=\"text\" name=\"username\" required />\n            {renderErrorMessage(\"notYourFriend\")}\n            <div className=\"button-container\">\n              <input type=\"submit\" />\n            </div>\n          </form>\n        </div>\n      </div>\n      <p></p>\n      <div key=\"groupPart\" className=\"group-part\">\n        <h3>Your Groups:</h3>\n        {\n          (loadingGroups || !dataGroups) ? (<p>Loading...</p>) : ((errorGroups) ? (<p>Error : {errorGroups.message}</p>) : (dataGroups.getUsersGroups.map(group =>\n            <p>{group.name}</p>\n          )))\n        }\n        <h4>Add User To Yours Group</h4>\n        <div className=\"addUserToGroupForm\">\n          <form onSubmit={HandleAddUserToGroup}>\n            <label>\n              Pick your group:\n              <select name=\"group\">\n                {\n                  (loadingGroups || !dataGroups) ? (<p>Loading...</p>) : ((errorGroups) ? (<p>Error : {errorGroups.message}</p>) : (dataGroups.getUsersGroups.map(group =>\n                    <option value={group.name}>{group.name}</option>\n                  )))\n                }\n              </select>\n            </label>\n            <label> user: </label>\n            <input type=\"text\" name=\"username\" required />\n            {renderErrorMessage(\"noSuchUser\")}\n            {renderErrorMessage(\"userAlreadyInGroup\")}\n            <div className=\"button-container\">\n              <input type=\"submit\" />\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n\n\n\n  //CODE\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error : {error.message}</p>;\n\n  let toReturn;\n\n  if (isLoginForm) {\n    //console.log(\"login form\");\n    if (isEnteredPassword && !isEnteredCorrectPassword && errorMessages.name != \"wrongPassword\") setErrorMessages({ name: \"wrongPassword\", message: errors.wrongPassword })\n    if (isEnteredPassword && isEnteredCorrectPassword && !loadingFriends && !dataFriends) {\n      getFriends({ variables: { id: dataUser.userIfCorrectPassword.id } });\n      getGroups({ variables: { id: dataUser.userIfCorrectPassword.id } });\n    }\n    if (toReloadFriends && ((dataAddFriend && dataAddFriend.addFriend) || (dataRemoveFriend && dataRemoveFriend.removeFriend))) {\n      setToReloadFriends(false);\n      refetchFriends({ id: dataUser.userIfCorrectPassword.id });\n    }\n    toReturn = (\n      <div key=\"form\" className=\"login-form\">\n        <div className=\"title\">Log In</div>\n        {(isEnteredPassword && isEnteredCorrectPassword) ? (renderUserIsLoginComponent) : (renderLoginForm)}\n      </div>\n    )\n  }\n  else {\n    //console.log(\"signin form\");\n    toReturn = (\n      <div key=\"form\" className=\"signin-form\">\n        <div className=\"title\">Sign In</div>\n        {(isSignin) ? <div>User is successfully signed in</div> : (renderSigninForm)}\n      </div>\n    )\n  }\n\n  return [\n    toReturn,\n    <p></p>,\n    <Button key=\"changeFormButton\" onClick={(e) => HandleChangeLoginSigin(e)}>{(isLoginForm) ? (<>Sign in</>) : (<>Log in</>)}</Button>\n  ]\n}\n\nconst App = () => {\n  {/*const [data, setData] = useState(initialState)\n\n  const getData = async () => {\n    const response = await fetch('/api/songs');\n    const body = await response.json()\n    setData({ songs: body, isLoading: false })\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])*/}\n\n\n\n  {/*\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Container>\n        \n          <div className=\"App-intro\">\n          <h2 style={{color: 'white'}}>Song List</h2>\n          <hr></hr>\n          <Row>\n          {data.songs.map(song =>\n              <Col>\n                 <SongCard key={song.id} song={song} />\n              </Col>\n           \n          )}\n          </Row>\n        </div>\n          \n      </Container>\n        \n      </header>\n      <div>\n        <h2>My first Apollo app 🚀</h2>\n        <br/>\n        <DisplayBook />\n      </div>\n      */}\n\n  return (\n    <div className=\"App\">\n      <InitialData />\n    </div>\n  )\n}\nexport default App;","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/SongCard.js",[],{"ruleId":"46","severity":1,"message":"47","line":3,"column":55,"nodeType":"48","messageId":"49","endLine":3,"endColumn":58},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"46","severity":1,"message":"54","line":1,"column":8,"nodeType":"48","messageId":"49","endLine":1,"endColumn":12},{"ruleId":"46","severity":1,"message":"55","line":4,"column":17,"nodeType":"48","messageId":"49","endLine":4,"endColumn":26},{"ruleId":"46","severity":1,"message":"56","line":5,"column":8,"nodeType":"48","messageId":"49","endLine":5,"endColumn":16},{"ruleId":"46","severity":1,"message":"57","line":6,"column":8,"nodeType":"48","messageId":"49","endLine":6,"endColumn":17},{"ruleId":"46","severity":1,"message":"58","line":7,"column":8,"nodeType":"48","messageId":"49","endLine":7,"endColumn":11},{"ruleId":"46","severity":1,"message":"59","line":8,"column":8,"nodeType":"48","messageId":"49","endLine":8,"endColumn":11},{"ruleId":"46","severity":1,"message":"60","line":11,"column":7,"nodeType":"48","messageId":"49","endLine":11,"endColumn":19},{"ruleId":"46","severity":1,"message":"61","line":87,"column":10,"nodeType":"48","messageId":"49","endLine":87,"endColumn":21},{"ruleId":"46","severity":1,"message":"62","line":126,"column":60,"nodeType":"48","messageId":"49","endLine":126,"endColumn":69},{"ruleId":"46","severity":1,"message":"63","line":127,"column":60,"nodeType":"48","messageId":"49","endLine":127,"endColumn":72},{"ruleId":"46","severity":1,"message":"64","line":130,"column":35,"nodeType":"48","messageId":"49","endLine":130,"endColumn":51},{"ruleId":"46","severity":1,"message":"65","line":130,"column":60,"nodeType":"48","messageId":"49","endLine":130,"endColumn":74},{"ruleId":"46","severity":1,"message":"66","line":131,"column":38,"nodeType":"48","messageId":"49","endLine":131,"endColumn":57},{"ruleId":"46","severity":1,"message":"67","line":131,"column":66,"nodeType":"48","messageId":"49","endLine":131,"endColumn":83},{"ruleId":"68","severity":1,"message":"69","line":132,"column":63,"nodeType":"70","messageId":"71","endLine":132,"endColumn":65},{"ruleId":"68","severity":1,"message":"72","line":134,"column":35,"nodeType":"70","messageId":"71","endLine":134,"endColumn":37},{"ruleId":"68","severity":1,"message":"72","line":183,"column":20,"nodeType":"70","messageId":"71","endLine":183,"endColumn":22},{"ruleId":"46","severity":1,"message":"73","line":201,"column":11,"nodeType":"48","messageId":"49","endLine":201,"endColumn":16},{"ruleId":"46","severity":1,"message":"74","line":201,"column":18,"nodeType":"48","messageId":"49","endLine":201,"endColumn":26},{"ruleId":"68","severity":1,"message":"69","line":351,"column":78,"nodeType":"70","messageId":"71","endLine":351,"endColumn":80},{"ruleId":"75","severity":1,"message":"76","line":385,"column":3,"nodeType":"77","messageId":"78","endLine":395,"endColumn":12},{"ruleId":"75","severity":1,"message":"76","line":399,"column":3,"nodeType":"77","messageId":"78","endLine":425,"endColumn":10},"no-unused-vars","'gql' is defined but never used.","Identifier","unusedVar","no-native-reassign",["79"],"no-negated-in-lhs",["80"],"'logo' is defined but never used.","'useEffect' is defined but never used.","'SongCard' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'initialState' is assigned a value but never used.","'DisplayBook' is defined but never used.","'errorUser' is assigned a value but never used.","'errorAddUser' is assigned a value but never used.","'loadingAddFriend' is assigned a value but never used.","'errorAddFriend' is assigned a value but never used.","'loadingRemoveFriend' is assigned a value but never used.","'errorRemoveFriend' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'group' is assigned a value but never used.","'username' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]