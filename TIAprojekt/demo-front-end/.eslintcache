[{"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/index.js":"1","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/reportWebVitals.js":"2","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/App.js":"3","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/SongCard.js":"4"},{"size":790,"mtime":1679498045511,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1679414982637,"results":"7","hashOfConfig":"6"},{"size":15930,"mtime":1681052933603,"results":"8","hashOfConfig":"6"},{"size":549,"mtime":1679415620117,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"w7vjyh",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/index.js",["21"],"import React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:3000/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n\nroot.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["22","23"],"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/reportWebVitals.js",[],"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/App.js",["24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44"],"import logo from './logo.svg';\nimport './App.css';\nimport { useQuery, gql, useLazyQuery, useMutation } from '@apollo/client';\nimport React, { useEffect, useState } from 'react'\nimport SongCard from './SongCard';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\n\nconst initialState = {\n  isLoading: true,\n  usernames: []\n}\n\nconst GET_BOOK_ONE = gql`\n    query bookDetails {\n      bookById(id: \"book-1\") {\n        id\n        name\n        pageCount\n        author {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n`;\n\nconst GET_ALL_USERNAMES = gql`\nquery allUsernames {\n  getAllUsernames\n}\n`;\nconst GET_USER_IF_CORRECT_PASSWORD = gql`\nquery getUserIfCorrectPassword($username: String!, $password: String!) {\n  userIfCorrectPassword(username: $username, password: $password){\n    id\n    username\n    password\n    isAdmin\n  }\n}\n`;\n\nconst ADD_USER = gql`\nmutation getAddUser($username: String!, $password: String!) {\n  addUser(userName: $username, password: $password){\n    id\n    username\n    password\n    isAdmin\n  }\n}\n`;\n\nconst GET_FRIENDS = gql`\nquery getFriends($id: Int!) {\n  getFriends(id: $id){\n    id\n    username\n  }\n}\n`;\n\nconst GET_GROUPS = gql`\nquery getUsersGroups($id: Int!) {\n  getUsersGroups(id: $id){\n    id\n    name\n  }\n}\n`;\n\nconst ADD_FRIEND = gql`\nmutation addFriend($id: Int!, $username: String!) {\n  addFriend(id: $id, username: $username)\n}\n`;\n\nconst REMOVE_FRIEND = gql`\nmutation removeFriend($id: Int!, $username: String!) {\n  removeFriend(id: $id, username: $username)\n}\n`;\n\nconst CREATE_GROUP = gql`\nmutation createGroup($id: Int!, $groupname: String!) {\n  createGroup(id: $id, groupname: $groupname)\n}\n`;\n\n\n\nfunction DisplayBook() {\n  const { loading, error, data } = useQuery(GET_BOOK_ONE);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error : {error.message}</p>;\n  console.log(data.bookById);\n  return (\n    <div key={data.bookById.id}>\n      <h3>{data.bookById.name}</h3>\n      <br />\n      <b>About this book:</b>\n      <p>page count:{data.bookById.pageCount}, author: {data.bookById.author.firstName} {data.bookById.author.lastName}</p>\n      <br />\n    </div>\n  );\n}\n\n\nfunction InitialData() {\n  //ENUMS\n  const errors = {\n    wrongUsername: \"invalid username\",\n    wrongPassword: \"invalid password\",\n    waitForResponseAboutPassword: \"wait\",\n    usedUsername: \"username is already used\",\n    differentControlPassword: \"second password is not the same\",\n    waitForResponseAboutAddUser: \"wait\",\n    noSuchUser: \"no existing user with such username\",\n    yourUsername: \"you can not add yourself as a friend\",\n    notYourFriend: \"user is not in your fiend list\",\n    alreadyYourFriend: \"user is already your friend\",\n    userAlreadyInGroup: \"user is already in group\",\n    existingGroup: \"group with such name already exists\"\n  };\n\n  //STATES\n  const [isLoginForm, setIsLoginForm] = useState(true);\n  const [toReloadFriends, setToReloadFriends] = useState(false);\n  const [toReloadGroups, setToReloadGroups] = useState(false);\n  const [errorMessages, setErrorMessages] = useState({});\n  const [link, setLink] = useState(\"\");\n  const [selectedGroup, setSelectedGroup] = useState(\"\");\n  const { loading, error, data } = useQuery(GET_ALL_USERNAMES);\n  const [getUserByPassword, { loading: loadingUser, error: errorUser, data: dataUser }] = useLazyQuery(GET_USER_IF_CORRECT_PASSWORD);\n  const [getAddUserData, { loading: loadingAddUser, error: errorAddUser, data: dataAddUser }] = useMutation(ADD_USER);\n  const [getFriends, { loading: loadingFriends, error: errorFriends, data: dataFriends, refetch: refetchFriends }] = useLazyQuery(GET_FRIENDS);\n  const [getGroups, { loading: loadingGroups, error: errorGroups, data: dataGroups }] = useLazyQuery(GET_GROUPS);\n  const [getAddFriend, { loading: loadingAddFriend, error: errorAddFriend, data: dataAddFriend }] = useMutation(ADD_FRIEND);\n  const [getRemoveFriend, { loading: loadingRemoveFriend, error: errorRemoveFriend, data: dataRemoveFriend }] = useMutation(REMOVE_FRIEND);\n  const isEnteredPassword = loadingUser === false && dataUser != undefined;\n  const isEnteredCorrectPassword = isEnteredPassword && dataUser.userIfCorrectPassword != null;\n  const isSignin = loadingAddUser == false && dataAddUser;\n\n\n  //HANDLERS\n  const HandleChangeLoginSigin = (event) => {\n    //event.preventDefault();\n    console.log(\"change form\");\n    if (!isLoginForm) window.location.reload(false);\n    else setIsLoginForm(!isLoginForm);\n  }\n\n  const HandleLogOut = (event) => {\n    window.location.reload(false);\n  }\n\n  const HandleSigninFormSubmit = (event) => {\n    event.preventDefault();\n    setErrorMessages({});\n    console.log(document.forms);\n    var { uname, passOne, passTwo } = document.forms[0];\n    const userData = data.getAllUsernames.find((user) => user === uname.value);\n    if (userData) {\n      setErrorMessages({ name: \"usedUsername\", message: errors.usedUsername });\n    }\n    else {\n      if (passOne.value === passTwo.value) {\n        getAddUserData({ variables: { userName: uname.value, password: passOne.value } });\n      }\n      else {\n        setErrorMessages({ name: \"differentControlPassword\", message: errors.differentControlPassword });\n      }\n    }\n  }\n\n  const HandleLoginFormSubmit = (event) => {\n    event.preventDefault();\n    setErrorMessages({});\n    var { uname, pass } = document.forms[0];\n\n    const userData = data.getAllUsernames.find((user) => user === uname.value);\n\n    if (userData) {\n      console.log(\"Should be set\" + uname.value + \" \" + pass.value);\n      getUserByPassword({ variables: { username: uname.value, password: pass.value } });\n    } else {\n      setErrorMessages({ name: \"wrongUsername\", message: errors.wrongUsername });\n    }\n  }\n\n  const HandleAddFriend = (event) => {\n    event.preventDefault();\n    setErrorMessages({});\n    var { username } = document.forms[0];\n\n    const userData = data.getAllUsernames.find((user) => user === username.value);\n    if (userData) {\n      if (userData == dataUser.userIfCorrectPassword.username) {\n        setErrorMessages({ name: \"yourUsername\", message: errors.yourUsername });\n      }\n      else if (dataFriends.getFriends.find((user) => user.username === username.value)) {\n        setErrorMessages({ name: \"alreadyYourFriend\", message: errors.alreadyYourFriend });\n      }\n      else {\n        getAddFriend({ variables: { id: dataUser.userIfCorrectPassword.id, username: username.value } });\n        setToReloadFriends(true);\n      }\n    }\n    else {\n      setErrorMessages({ name: \"noSuchUser\", message: errors.noSuchUser });\n    }\n  }\n\n  const HandleRemoveFriend = (event) => {\n    event.preventDefault();\n    setErrorMessages({});\n    var { username } = document.forms[1];\n    console.log(username.value);\n    const userData = dataFriends.getFriends.find((user) => user.username === username.value);\n    console.log(userData);\n    if (userData) {\n      getRemoveFriend({ variables: { id: dataUser.userIfCorrectPassword.id, username: username.value } });\n      setToReloadFriends(true);\n    }\n    else {\n      setErrorMessages({ name: \"notYourFriend\", message: errors.notYourFriend });\n    }\n  }\n\n  const HandleCreateGroup = (event) => {\n    event.preventDefault();\n    setErrorMessages({});\n  }\n\n  const HandleAddUserToGroup = (event) => {\n    event.preventDefault();\n    var { username } = document.forms[2];\n    setErrorMessages({});\n    \n  }\n\n  const HandleNavigation = (eventKey) => {\n    if (eventKey != \"\") {\n      console.log(eventKey);\n      setSelectedGroup(\"\");\n      setLink(eventKey);\n    }\n  }\n\n  //HTML RETURN_FUNCTIONS/VARIABLES\n  const renderErrorMessage = (name) =>\n    name === errorMessages.name && (\n      <div className=\"error\">{errorMessages.message}</div>\n    );\n\n  const renderNav = (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\n      {/*<Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>*/}\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"me-auto\" variant=\"pills\" defaultActiveKey={\"recommendations\"} onSelect={HandleNavigation}>\n          <Nav.Link eventKey={\"recommendations\"}>Recommendations</Nav.Link>\n          <Nav.Link eventKey={\"friends\"}>Friends</Nav.Link>\n          <Nav.Link eventKey={\"groups\"}>Groups</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n\n  const renderLoginForm = (\n    <div className=\"login-form\">\n      <div className=\"title\">Log In</div>\n      <form onSubmit={HandleLoginFormSubmit}>\n        {renderErrorMessage(\"waitForResponseAboutPassword\")}\n        <div className=\"input-container\">\n          <label>Username </label>\n          <input type=\"text\" name=\"uname\" required />\n          {renderErrorMessage(\"wrongUsername\")}\n        </div>\n        <div className=\"input-container\">\n          <label>Password </label>\n          <input type=\"password\" name=\"pass\" required />\n          {renderErrorMessage(\"wrongPassword\")}\n        </div>\n        <div className=\"button-container\">\n          <input type=\"submit\" />\n        </div>\n      </form>\n    </div>\n  );\n\n  const renderSigninForm = (\n    <div className=\"SigninForm\">\n      <form onSubmit={HandleSigninFormSubmit}>\n        {renderErrorMessage(\"waitForResponseAboutAddUser\")}\n        <div className=\"input-container\">\n          <label>Username </label>\n          <input type=\"text\" name=\"uname\" required />\n          {renderErrorMessage(\"usedUsername\")}\n        </div>\n        <div className=\"input-container\">\n          <label>Password </label>\n          <input type=\"password\" name=\"passOne\" required />\n        </div>\n        <div className=\"input-container\">\n          <label>Password second time</label>\n          <input type=\"password\" name=\"passTwo\" required />\n          {renderErrorMessage(\"differentControlPassword\")}\n        </div>\n        <div className=\"button-container\">\n          <input type=\"submit\" />\n        </div>\n      </form>\n    </div>\n  );\n\n  const renderRecommendations = (\n    <div className='part'>\n      Recommendations\n    </div>\n  )\n\n  const renderFriendsForms = (\n    <div className=\"bottomPanel\">\n      <h4>Manage Your Friends</h4>\n      <div className=\"addFriendForm\">\n        <form onSubmit={HandleAddFriend}>\n          <label>add user: </label>\n          <input type=\"text\" name=\"username\" required />\n          {renderErrorMessage(\"noSuchUser\")}\n          {renderErrorMessage(\"yourUsername\")}\n          {renderErrorMessage(\"alreadyYourFriend\")}\n          <div className=\"button-container\">\n            <input type=\"submit\" />\n          </div>\n        </form>\n      </div>\n      <div className=\"removeFriendForm\">\n        <form onSubmit={HandleRemoveFriend}>\n          <label>remove friend: </label>\n          <input type=\"text\" name=\"username\" required />\n          {renderErrorMessage(\"notYourFriend\")}\n          <div className=\"button-container\">\n            <input type=\"submit\" />\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n\n  const renderFriends = (\n    <div className='part'>\n      <h3>Your Friends:</h3>\n      {\n        (loadingFriends || !dataFriends) ? (<p>Loading...</p>) : ((errorFriends) ? (<p>Error : {errorFriends.message}</p>) : (dataFriends.getFriends.map(user =>\n          <p>{user.username}</p>\n        )))\n      }\n      {(!toReloadFriends && !loadingFriends && dataFriends && dataFriends.getFriends) ? (renderFriendsForms) : (<>Loading...</>)}\n    </div>\n  )\n\n  const renderAllGroups = (\n    <div>\n      <h3>Your Groups:</h3>\n      {\n        (loadingGroups || !dataGroups) ? (<p>Loading...</p>) : ((errorGroups) ? (<p>Error : {errorGroups.message}</p>) : (dataGroups.getUsersGroups.map(group =>\n          <Button className=\"groupButton\" onClick={() => setSelectedGroup(group)}>{group.name}</Button>\n\n        )))\n      }\n    </div>\n  )\n\n  const renderSelectedGroup = (\n    <div>\n      <Button className=\"backToAllGroups\" onClick={() => setSelectedGroup(\"\")}>&#60; back to all groups</Button>\n\n    </div>\n  )\n\n  const renderCreateGroup = (\n    <div>\n      <h4>Create new group</h4>\n      <form onSubmit={HandleCreateGroup}>\n        <label>name of your new group: </label>\n        <input type=\"text\" name=\"groupName\" required />\n        {renderErrorMessage(\"existingGroup\")}\n        <div className=\"button-container\">\n          <input type=\"submit\" />\n        </div>\n        <div className=\"button-container\">\n          <input type=\"submit\" />\n        </div>\n      </form>\n    </div>\n  )\n\n  const renderAddUserToGroup = (\n    <div>\n      <h4>Add User To {selectedGroup.name}</h4>\n      <div className=\"addUserToGroupForm\">\n        <form onSubmit={HandleAddUserToGroup}>\n          <label>\n            Pick your friend:\n            <select name=\"friend\">\n              {\n                (loadingFriends || !dataFriends) ? (<p>Loading...</p>) : ((errorFriends) ? (<p>Error : {errorFriends.message}</p>) : (dataFriends.getFriends.map(user =>\n                  <option value={user.id}>{user.username}</option>\n                )))\n              }\n            </select>\n          </label>\n          <div className=\"button-container\">\n            <input type=\"submit\" />\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n\n  const renderGroups = (\n    <div className=\"part\">\n      {(selectedGroup === \"\") ? (renderAllGroups) : (renderSelectedGroup)}\n      <div className=\"bottomPanel\">\n        {(selectedGroup === \"\") ? (renderCreateGroup) : (renderAddUserToGroup)}\n      </div>\n    </div>\n  )\n\n  const renderUserIsLoginComponent = (\n    <div key=\"userIsLoginComponent\" className=\"user-is-login\">\n      {(link === \"\" || link === \"recommendations\")\n        ? (renderRecommendations)\n        : ((link === \"friends\") ? (renderFriends) : (renderGroups))}\n    </div>\n  );\n\n\n\n  //CODE\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error : {error.message}</p>;\n\n  let toReturn;\n\n  if (isLoginForm) {\n    //console.log(\"login form\");\n    if (isEnteredPassword && !isEnteredCorrectPassword && errorMessages.name != \"wrongPassword\") setErrorMessages({ name: \"wrongPassword\", message: errors.wrongPassword })\n    if (isEnteredPassword && isEnteredCorrectPassword && !loadingFriends && !dataFriends) {\n      getFriends({ variables: { id: dataUser.userIfCorrectPassword.id } });\n      getGroups({ variables: { id: dataUser.userIfCorrectPassword.id } });\n    }\n    if (toReloadFriends && !loadingAddFriend && !loadingRemoveFriend) {\n      console.log(\"reload friends\");\n      refetchFriends({ id: dataUser.userIfCorrectPassword.id });\n      setToReloadFriends(false);\n    }\n    toReturn = (\n      <div>\n        {(isEnteredPassword && isEnteredCorrectPassword) ? (renderUserIsLoginComponent) : (renderLoginForm)}\n      </div>\n    )\n  }\n  else {\n    //console.log(\"signin form\");\n    toReturn = (\n      <div className=\"signin-form\">\n        <div className=\"title\">Sign In</div>\n        {(isSignin) ? <div>User is successfully signed in</div> : (renderSigninForm)}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"app\">\n      <Container fluid className=\"upperPanel\">\n        <Row>\n          <Col>{(isEnteredPassword && isEnteredCorrectPassword) ? (renderNav) : (<>Need to login</>)}</Col>\n          <Col xs=\"auto\" className=\"buttonHolder\">\n            {(isEnteredPassword && isEnteredCorrectPassword)\n              ? (<Button className=\"logOutButton\" onClick={(e) => HandleLogOut(e)}>Log out</Button>)\n              : (<Button className=\"changeFormButton\" onClick={(e) => HandleChangeLoginSigin(e)}>{(isLoginForm) ? (<>Sign in</>) : (<>Log in</>)}</Button>)}\n          </Col>\n        </Row>\n      </Container>\n      <div className=\"mainPanel\">{toReturn}</div>\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <InitialData />\n  )\n}\nexport default App;","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/SongCard.js",[],{"ruleId":"45","severity":1,"message":"46","line":3,"column":55,"nodeType":"47","messageId":"48","endLine":3,"endColumn":58},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"45","severity":1,"message":"53","line":1,"column":8,"nodeType":"47","messageId":"48","endLine":1,"endColumn":12},{"ruleId":"45","severity":1,"message":"54","line":4,"column":17,"nodeType":"47","messageId":"48","endLine":4,"endColumn":26},{"ruleId":"45","severity":1,"message":"55","line":5,"column":8,"nodeType":"47","messageId":"48","endLine":5,"endColumn":16},{"ruleId":"45","severity":1,"message":"56","line":12,"column":8,"nodeType":"47","messageId":"48","endLine":12,"endColumn":19},{"ruleId":"45","severity":1,"message":"57","line":14,"column":7,"nodeType":"47","messageId":"48","endLine":14,"endColumn":19},{"ruleId":"45","severity":1,"message":"58","line":91,"column":7,"nodeType":"47","messageId":"48","endLine":91,"endColumn":19},{"ruleId":"45","severity":1,"message":"59","line":99,"column":10,"nodeType":"47","messageId":"48","endLine":99,"endColumn":21},{"ruleId":"45","severity":1,"message":"60","line":137,"column":10,"nodeType":"47","messageId":"48","endLine":137,"endColumn":24},{"ruleId":"45","severity":1,"message":"61","line":137,"column":26,"nodeType":"47","messageId":"48","endLine":137,"endColumn":43},{"ruleId":"45","severity":1,"message":"62","line":142,"column":60,"nodeType":"47","messageId":"48","endLine":142,"endColumn":69},{"ruleId":"45","severity":1,"message":"63","line":143,"column":60,"nodeType":"47","messageId":"48","endLine":143,"endColumn":72},{"ruleId":"45","severity":1,"message":"64","line":146,"column":60,"nodeType":"47","messageId":"48","endLine":146,"endColumn":74},{"ruleId":"45","severity":1,"message":"65","line":146,"column":82,"nodeType":"47","messageId":"48","endLine":146,"endColumn":95},{"ruleId":"45","severity":1,"message":"66","line":147,"column":66,"nodeType":"47","messageId":"48","endLine":147,"endColumn":83},{"ruleId":"45","severity":1,"message":"67","line":147,"column":91,"nodeType":"47","messageId":"48","endLine":147,"endColumn":107},{"ruleId":"68","severity":1,"message":"69","line":148,"column":63,"nodeType":"70","messageId":"71","endLine":148,"endColumn":65},{"ruleId":"68","severity":1,"message":"72","line":150,"column":35,"nodeType":"70","messageId":"71","endLine":150,"endColumn":37},{"ruleId":"68","severity":1,"message":"72","line":206,"column":20,"nodeType":"70","messageId":"71","endLine":206,"endColumn":22},{"ruleId":"45","severity":1,"message":"73","line":245,"column":11,"nodeType":"47","messageId":"48","endLine":245,"endColumn":19},{"ruleId":"68","severity":1,"message":"69","line":251,"column":18,"nodeType":"70","messageId":"71","endLine":251,"endColumn":20},{"ruleId":"68","severity":1,"message":"69","line":457,"column":78,"nodeType":"70","messageId":"71","endLine":457,"endColumn":80},"no-unused-vars","'gql' is defined but never used.","Identifier","unusedVar","no-native-reassign",["74"],"no-negated-in-lhs",["75"],"'logo' is defined but never used.","'useEffect' is defined but never used.","'SongCard' is defined but never used.","'NavDropdown' is defined but never used.","'initialState' is assigned a value but never used.","'CREATE_GROUP' is assigned a value but never used.","'DisplayBook' is defined but never used.","'toReloadGroups' is assigned a value but never used.","'setToReloadGroups' is assigned a value but never used.","'errorUser' is assigned a value but never used.","'errorAddUser' is assigned a value but never used.","'errorAddFriend' is assigned a value but never used.","'dataAddFriend' is assigned a value but never used.","'errorRemoveFriend' is assigned a value but never used.","'dataRemoveFriend' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'username' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]