[{"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/index.js":"1","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/reportWebVitals.js":"2","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/App.js":"3","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/SongCard.js":"4"},{"size":807,"mtime":1682150340813,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1679414982637,"results":"7","hashOfConfig":"6"},{"size":31020,"mtime":1682361171431,"results":"8","hashOfConfig":"6"},{"size":549,"mtime":1679415620117,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"w7vjyh",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/index.js",["21","22"],"import React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { ApolloClient, InMemoryCache, ApolloProvider, ApolloLink, HttpLink } from '@apollo/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: 'http://localhost:3000/graphql',\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n\nroot.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["23","24"],"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/reportWebVitals.js",[],"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/App.js",["25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56"],"import logo from './logo.svg';\nimport './App.css';\nimport { useQuery, gql, useLazyQuery, useMutation } from '@apollo/client';\nimport React, { useEffect, useState } from 'react'\nimport SongCard from './SongCard';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Select from 'react-select';\n\nconst initialState = {\n  isLoading: true,\n  usernames: []\n}\n\nconst GET_BOOK_ONE = gql`\n    query bookDetails {\n      bookById(id: \"book-1\") {\n        id\n        name\n        pageCount\n        author {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n`;\n\nconst GET_ALL_USERNAMES = gql`\nquery allUsernames {\n  getAllUsernames\n}\n`;\n\nconst GET_FILM_GENRES = gql`\nquery getFilmGenres {\n  getFilmGenres{\n    id\n    name\n  }\n}\n`;\n\nconst GET_GAME_GENRES = gql`\nquery getGameGenres {\n  getGameGenres{\n    id\n    name\n  }\n}\n`;\n\nconst GET_USER_IF_CORRECT_PASSWORD = gql`\nquery getUserIfCorrectPassword($username: String!, $password: String!) {\n  userIfCorrectPassword(username: $username, password: $password){\n    id\n    username\n    password\n    isAdmin\n  }\n}\n`;\n\nconst ADD_USER = gql`\nmutation getAddUser($username: String!, $password: String!) {\n  addUser(username: $username, password: $password){\n    id\n    username\n    password\n    isAdmin\n  }\n}\n`;\n\nconst GET_FRIENDS = gql`\nquery getFriends($id: Int!) {\n  getFriends(id: $id){\n    id\n    username\n  }\n}\n`;\n\nconst GET_GROUPS = gql`\nquery getUsersGroups($id: Int!) {\n  getUsersGroups(id: $id){\n    id\n    name\n  }\n}\n`;\n\nconst GET_RECOMMENDATIONS = gql`\nquery getUsersRecommendations($id: Int!) {\n  getUsersRecommendations(id: $id){\n    id\n    sender{\n      id\n      username\n    }\n    group{\n      id\n      name\n    }\n    receiver{\n      id\n      username\n    }\n    title\n    description\n    rating\n    gameAddition{\n      progress\n    }\n    postTime\n    genres{\n      id\n      name\n    }\n    feedbacks{\n      id\n      user{\n        id\n        username\n      }\n      state\n      rating\n      commentary\n    }\n  }\n}\n`;\n\nconst ADD_FRIEND = gql`\nmutation addFriend($id: Int!, $username: String!) {\n  addFriend(id: $id, username: $username)\n}\n`;\n\nconst REMOVE_FRIEND = gql`\nmutation removeFriend($id: Int!, $username: String!) {\n  removeFriend(id: $id, username: $username)\n}\n`;\n\nconst CREATE_GROUP = gql`\nmutation createGroup($id: Int!, $groupname: String!) {\n  createGroup(id: $id, groupname: $groupname)\n}\n`;\n\nconst LEAVE_GROUP = gql`\nmutation leaveGroup($userid: Int!, $groupid: Int!) {\n  leaveGroup(userid: $userid, groupid: $groupid)\n}\n`;\n\nconst GET_GROUP_MEMBERS = gql`\nquery getMembersOfGroup($id: Int!) {\n  getMembersOfGroup(id: $id){\n    id\n    username\n  }\n}\n`;\n\nconst ADD_USER_TO_GROUP = gql`\nmutation addUserToGroup($userid: Int!, $groupid: Int!) {\n  addUserToGroup(userid: $userid, groupid: $groupid)\n}\n`;\n\nconst CREATE_RECOMMENDATION = gql`\nmutation createRecommendation($userid: Int!, $groupid: Int, $receiver: Int, $title: String!, $description: String, $rating: Int!, $progress: Float, $genresids: [Int]!) {\n  createRecommendation(sender: $userid, groupid: $groupid, receiver: $receiver, title: $title, description: $description, rating: $rating, progress: $progress, genresids: $genresids)\n}\n`;\n\nconst CREATE_FEEDBACK = gql`\nmutation createFeedback($recommendationId: Int!, $userId: Int!, $state: FeedbackerState!, $rating: Int!, $commentary: String) {\n  createFeedback(recommendationId: $recommendationId, userId: $userId, state: $state, rating: $rating, commentary: $commentary)\n}\n`;\n\n\n\nfunction InitialData() {\n  //ENUMS\n  const errors = {\n    wrongUsername: \"invalid username\",\n    wrongPassword: \"invalid password\",\n    waitForResponseAboutPassword: \"wait\",\n    usedUsername: \"username is already used\",\n    differentControlPassword: \"second password is not the same\",\n    waitForResponseAboutAddUser: \"wait\",\n    noSuchUser: \"no existing user with such username\",\n    yourUsername: \"you can not add yourself as a friend\",\n    notYourFriend: \"user is not in your fiend list\",\n    alreadyYourFriend: \"user is already your friend\",\n    userAlreadyInGroup: \"user is already in group\",\n    existingGroup: \"group with such name already exists\",\n    alreadyInGroup: \"this friend is already part of the group\",\n    atLeastOne: \"you need to select at least one friend or group\"\n  };\n\n  //STATES\n  const [isLoginForm, setIsLoginForm] = useState(true);\n  const [toReloadFriends, setToReloadFriends] = useState(false);\n  const [toReloadGroups, setToReloadGroups] = useState(false);\n  const [toReloadRecommendations, setToReloadRecommendations] = useState(false);\n  const [leftGroup, setLeftGroup] = useState(false);\n  const [errorMessages, setErrorMessages] = useState({});\n  const [link, setLink] = useState(\"\");\n  const [selectedGroup, setSelectedGroup] = useState(\"\");\n  const [toCreateRecommendation, setToCreateRecommendation] = useState(false);\n  const [recommendationForFilm, setRecommendationForFilm] = useState(true);\n  const { loading, error, data } = useQuery(GET_ALL_USERNAMES);\n  const { loading: loadingFilmGenres, error: errorFilmGenres, data: dataFilmGenres } = useQuery(GET_FILM_GENRES, { queryKey: ['filmGenres'] });\n  const { loading: loadingGameGenres, error: errorGameGenres, data: dataGameGenres } = useQuery(GET_GAME_GENRES, { queryKey: ['gameGenres'] });\n  const [getUserByPassword, { loading: loadingUser, error: errorUser, data: dataUser }] = useLazyQuery(GET_USER_IF_CORRECT_PASSWORD);\n  const [getAddUserData, { loading: loadingAddUser, error: errorAddUser, data: dataAddUser }] = useMutation(ADD_USER);\n  const [getFriends, { loading: loadingFriends, error: errorFriends, data: dataFriends, refetch: refetchFriends }] = useLazyQuery(GET_FRIENDS);\n  const [getGroups, { loading: loadingGroups, error: errorGroups, data: dataGroups, refetch: refetchGroups }] = useLazyQuery(GET_GROUPS);\n  const [getRecommendations, { loading: loadingRecommendations, error: errorRecommendations, data: dataRecommendations, refetch: refetchRecommendations }] = useLazyQuery(GET_RECOMMENDATIONS);\n  const [getAddFriend, { loading: loadingAddFriend, error: errorAddFriend, data: dataAddFriend }] = useMutation(ADD_FRIEND);\n  const [getRemoveFriend, { loading: loadingRemoveFriend, error: errorRemoveFriend, data: dataRemoveFriend }] = useMutation(REMOVE_FRIEND);\n  const [getCreateGroup, { loading: loadingCreateGroup, error: errorCreateGroup, data: dataCreateGroup }] = useMutation(CREATE_GROUP);\n  const [getLeaveGroup, { loading: loadingLeaveGroup, error: errorLeaveGroup, data: dataLeaveGroup }] = useMutation(LEAVE_GROUP);\n  const [getGroupsMembers, { loading: loadingGroupsMembers, error: errorGroupsMembers, data: dataGroupsMembers, refetch: refetchGroupsMembers }] = useLazyQuery(GET_GROUP_MEMBERS);\n  const [fetchedGroupMembersName, setFetchedGroupMembersName] = useState(\"\");\n  const [getAddUserToGroup, { loading: loadingAddUserToGroup, error: errorAddUserToGroup, data: dataAddUserToGroup }] = useMutation(ADD_USER_TO_GROUP);\n  const [getCreateRecommendation, { loading: loadingCreateRecommendation, error: errorCreateRecommendation, data: dataCreateRecommendation }] = useMutation(CREATE_RECOMMENDATION);\n  const [getCreateFeedback, { loading: loadingCreateFeedback, error: errorCreateFeedback, data: dataCreateFeedback }] = useMutation(CREATE_FEEDBACK);\n  const isEnteredPassword = loadingUser === false && dataUser != undefined;\n  const isEnteredCorrectPassword = isEnteredPassword && dataUser.userIfCorrectPassword != null;\n  const isSignin = loadingAddUser == false && dataAddUser;\n\n\n  //HANDLERS\n  const HandleChangeLoginSigin = (event) => {\n    //event.preventDefault();\n    console.log(\"change form\");\n    if (!isLoginForm) window.location.reload(false);\n    else setIsLoginForm(!isLoginForm);\n  }\n\n  const HandleLogOut = (event) => {\n    window.location.reload(false);\n  }\n\n  const HandleSigninFormSubmit = (event) => {\n    event.preventDefault();\n    setErrorMessages({});\n    console.log(document.forms);\n    var { uname, passOne, passTwo } = document.forms[0];\n    const userData = data.getAllUsernames.find((user) => user === uname.value);\n    if (userData) {\n      setErrorMessages({ name: \"usedUsername\", message: errors.usedUsername });\n    }\n    else {\n      if (passOne.value === passTwo.value) {\n        getAddUserData({ variables: { username: uname.value, password: passOne.value } });\n      }\n      else {\n        setErrorMessages({ name: \"differentControlPassword\", message: errors.differentControlPassword });\n      }\n    }\n  }\n\n  const HandleLoginFormSubmit = (event) => {\n    event.preventDefault();\n    setErrorMessages({});\n    var { uname, pass } = document.forms[0];\n\n    const userData = data.getAllUsernames.find((user) => user === uname.value);\n\n    if (userData) {\n      getUserByPassword({ variables: { username: uname.value, password: pass.value } });\n    } else {\n      setErrorMessages({ name: \"wrongUsername\", message: errors.wrongUsername });\n    }\n  }\n\n  const HandleAddFriend = (event) => {\n    event.preventDefault();\n    setErrorMessages({});\n    var { username } = document.forms[0];\n\n    const userData = data.getAllUsernames.find((user) => user === username.value);\n    if (userData) {\n      if (userData == dataUser.userIfCorrectPassword.username) {\n        setErrorMessages({ name: \"yourUsername\", message: errors.yourUsername });\n      }\n      else if (dataFriends.getFriends.find((user) => user.username === username.value)) {\n        setErrorMessages({ name: \"alreadyYourFriend\", message: errors.alreadyYourFriend });\n      }\n      else {\n        getAddFriend({ variables: { id: dataUser.userIfCorrectPassword.id, username: username.value } });\n        setToReloadFriends(true);\n      }\n    }\n    else {\n      setErrorMessages({ name: \"noSuchUser\", message: errors.noSuchUser });\n    }\n  }\n\n  const HandleRemoveFriend = (event) => {\n    event.preventDefault();\n    setErrorMessages({});\n    var { username } = document.forms[1];\n    console.log(username.value);\n    const userData = dataFriends.getFriends.find((user) => user.username === username.value);\n    console.log(userData);\n    if (userData) {\n      getRemoveFriend({ variables: { id: dataUser.userIfCorrectPassword.id, username: username.value } });\n      setToReloadFriends(true);\n    }\n    else {\n      setErrorMessages({ name: \"notYourFriend\", message: errors.notYourFriend });\n    }\n  }\n\n  const HandleCreateGroup = (event) => {\n    event.preventDefault();\n    setErrorMessages({});\n\n    var { groupname } = document.forms[0];\n    getCreateGroup({ variables: { id: dataUser.userIfCorrectPassword.id, groupname: groupname.value } });\n    setToReloadGroups(true);\n  }\n\n  const HandleLeaveGroup = (event) => {\n    event.preventDefault();\n    setErrorMessages({});\n    getLeaveGroup({ variables: { userid: dataUser.userIfCorrectPassword.id, groupid: selectedGroup.id } });\n    setSelectedGroup(\"\");\n    setToReloadGroups(true);\n    setLeftGroup(true);\n  }\n\n  const HandleAddUserToGroup = (event) => {\n    event.preventDefault();\n    var friendId = document.getElementById(\"addFriendToThisGroupSelect\").value;\n    console.log(dataGroupsMembers.getMembersOfGroup);\n    setErrorMessages({});\n    if (dataGroupsMembers.getMembersOfGroup.find(userInfo => userInfo.id == friendId)) {\n      setErrorMessages({ name: \"alreadyInGroup\", message: errors.alreadyInGroup });\n    }\n    else {\n      getAddUserToGroup({ variables: { userid: friendId, groupid: selectedGroup.id } });\n      setFetchedGroupMembersName(\"\");\n    }\n  }\n\n  const HandleNavigation = (eventKey) => {\n    if (eventKey != \"\") {\n      //console.log(eventKey);\n      setErrorMessages({});\n      setSelectedGroup(\"\");\n      setLink(eventKey);\n    }\n  }\n\n  const [selectedGroups, setSelectedGroups] = useState([]);\n  const [selectedFriends, setSelectedFriends] = useState([]);\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [selectedRating, setSelectedRating] = useState();\n\n  const onGroupsChange = (selectedOptions) => setSelectedGroups(selectedOptions);\n  const onFriendsChange = (selectedOptions) => setSelectedFriends(selectedOptions);\n  const onGenresChange = (selectedOptions) => { setSelectedGenres(selectedOptions); }\n  const onRatingChange = (selectedOption) => { setSelectedRating(selectedOption); }\n\n  const HandleCreateRecommendation = (event) => {\n    event.preventDefault();\n    var { title, description, progress } = document.forms[0];\n\n    if (selectedGroups.length + selectedFriends.length <= 0) {\n      setErrorMessages({ name: \"atLeastOne\", message: errors.atLeastOne });\n    } else {\n      selectedFriends.forEach(element => {\n        getCreateRecommendation({\n          variables: {\n            userid: dataUser.userIfCorrectPassword.id,\n            receiver: element.value,\n            title: title.value,\n            description: description.value,\n            rating: selectedRating.value,\n            progress: (progress) ? (progress.value / 100) : (null),\n            genresids: selectedGenres.map(genre => genre.value)\n          }\n        });\n      })\n      selectedGroups.forEach(element => {\n        getCreateRecommendation({\n          variables: {\n            userid: dataUser.userIfCorrectPassword.id,\n            groupid: element.value,\n            title: title.value,\n            description: description.value,\n            rating: selectedRating.value,\n            progress: (progress) ? (progress.value / 100) : (null),\n            genresids: selectedGenres.map(genre => genre.value)\n          }\n        });\n      })\n    }\n  }\n\n  const HandleCreateFeedback = (event) => {\n    event.preventDefault();\n    var { commentary } = document.forms[0];\n    getCreateFeedback({\n      variables: {\n        recommendationId: recToFeedback,\n        userId: dataUser.userIfCorrectPassword.id,\n        state: feedbackersState.value,\n        rating: myRating.value,\n        commentary: commentary.value\n      }\n    });\n    setFeedbackersState();\n    setMyRating();\n    setRecToFeedback();\n    setToReloadRecommendations(true);\n  }\n\n  //HTML RETURN_FUNCTIONS/VARIABLES\n  const renderErrorMessage = (name) =>\n    name === errorMessages.name && (\n      <div className=\"error\">{errorMessages.message}</div>\n    );\n\n  const renderNav = (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\n      {/*<Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>*/}\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"me-auto\" variant=\"pills\" defaultActiveKey={\"recommendations\"} onSelect={HandleNavigation}>\n          <Nav.Link eventKey={\"recommendations\"}>Recommendations</Nav.Link>\n          <Nav.Link eventKey={\"friends\"}>Friends</Nav.Link>\n          <Nav.Link eventKey={\"groups\"}>Groups</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n\n  const renderLoginForm = (\n    <div className=\"login-form\">\n      <div className=\"title\">Log In</div>\n      <form onSubmit={HandleLoginFormSubmit}>\n        {renderErrorMessage(\"waitForResponseAboutPassword\")}\n        <div className=\"input-container\">\n          <label>Username </label>\n          <input type=\"text\" name=\"uname\" required />\n          {renderErrorMessage(\"wrongUsername\")}\n        </div>\n        <div className=\"input-container\">\n          <label>Password </label>\n          <input type=\"password\" name=\"pass\" required />\n          {renderErrorMessage(\"wrongPassword\")}\n        </div>\n        <div className=\"button-container\">\n          <input type=\"submit\" />\n        </div>\n      </form>\n    </div>\n  );\n\n  const renderSigninForm = (\n    <div className=\"SigninForm\">\n      <form onSubmit={HandleSigninFormSubmit}>\n        {renderErrorMessage(\"waitForResponseAboutAddUser\")}\n        <div className=\"input-container\">\n          <label>Username </label>\n          <input type=\"text\" name=\"uname\" required />\n          {renderErrorMessage(\"usedUsername\")}\n        </div>\n        <div className=\"input-container\">\n          <label>Password </label>\n          <input type=\"password\" name=\"passOne\" required />\n        </div>\n        <div className=\"input-container\">\n          <label>Password second time</label>\n          <input type=\"password\" name=\"passTwo\" required />\n          {renderErrorMessage(\"differentControlPassword\")}\n        </div>\n        <div className=\"button-container\">\n          <input type=\"submit\" />\n        </div>\n      </form>\n    </div>\n  );\n\n  const renderCreateRecommendation = (\n    <div>\n      <h3>Create Recommendation</h3>\n      <Button className=\"recommendationButton\" onClick={() => { setRecommendationForFilm(!recommendationForFilm); setSelectedGenres(); }}>{(recommendationForFilm) ? (<>Show form for game</>) : (<>Show form for movie</>)}</Button>\n      <form id='createRecommendationForm' onSubmit={HandleCreateRecommendation}>\n        <div>\n          <label>For Groups:</label>\n          <Select isMulti onChange={onGroupsChange} options={(dataGroups) ? (dataGroups.getUsersGroups.map(group => ({ value: group.id, label: group.name }))) : (<></>)} />\n        </div>\n        <div>\n          <label>For Friends:</label>\n          <Select isMulti onChange={onFriendsChange} options={(dataFriends) ? (dataFriends.getFriends.map(friend => ({ value: friend.id, label: friend.username }))) : (<></>)} />\n        </div>\n        {renderErrorMessage(\"atLeastOne\")}\n        <div className=\"input-container\">\n          <label>Title </label>\n          <input type=\"text\" name=\"title\" required />\n        </div>\n        <div className=\"input-container\">\n          <label>Description </label>\n          <textarea name=\"description\"></textarea>\n        </div>\n        <div>\n          <label>Your rating </label>\n          <Select id=\"rating\" required onChange={onRatingChange} options={[\n            { value: 0, label: 0 },\n            { value: 1, label: 1 },\n            { value: 2, label: 2 },\n            { value: 3, label: 3 },\n            { value: 4, label: 4 },\n            { value: 5, label: 5 },\n            { value: 6, label: 6 },\n            { value: 7, label: 7 },\n            { value: 8, label: 8 },\n            { value: 9, label: 9 },\n            { value: 10, label: 10 }\n          ]} />\n        </div>\n        {\n          (recommendationForFilm) ? (<></>) : (<div>\n            <label>Your progress (%)</label>\n            <input type=\"number\" name=\"progress\" min=\"1\" max=\"100\" required />\n          </div>)\n        }\n        <div>\n          <label>Genres:</label>\n          {\n            (recommendationForFilm) ? (\n              <Select key=\"filmGenresSelect\" isMulti required onChange={onGenresChange} closeMenuOnSelect={false} options={(dataFilmGenres && !loadingFilmGenres) ? (dataFilmGenres.getFilmGenres.map(genre => ({ value: genre.id, label: genre.name }))) : (<></>)} />\n            ) : (\n              <Select key=\"gameGenresSelect\" isMulti required onChange={onGenresChange} closeMenuOnSelect={false} options={(dataGameGenres && !loadingGameGenres) ? (dataGameGenres.getGameGenres.map(genre => ({ value: genre.id, label: genre.name }))) : (<></>)} />\n            )\n          }\n        </div>\n        <div className=\"button-container\">\n          <input type=\"submit\" />\n        </div>\n      </form>\n    </div>\n  )\n\n  const renderRecFromMe = (rec) => (\n    <div>\n      {console.log(\"from me\")}\n      {console.log(rec)}\n      <h4>{(rec.gameAddition) ? (<>Game </>) : (<></>)}Title: {rec.title}</h4>\n      {(rec.description) ? (<p>Description: {rec.description}</p>) : (<></>)}\n      To: {(rec.group) ? (rec.group.name) : (rec.receiver.username)}<br/>\n      My rating: {rec.rating}/10<br/>\n      {(rec.gameAddition) ? (<p>Percentage of played: {rec.gameAddition.progress * 100}</p>) : (<></>)}\n      Genres: {rec.genres.map(genre => <> {genre.name}</>)}<br/>\n      {rec.feedbacks.map(fb =>\n        <div>\n          <h5>Feedback: </h5>\n          <p>From: {fb.user.username}, Feedbacker's state: {fb.state}, Rating: {fb.rating}<br/>\n            Commentary: {fb.commentary}</p>\n        </div>\n      )}\n    </div>\n  )\n\n  const [recToFeedback, setRecToFeedback] = useState();\n  const [feedbackersState, setFeedbackersState] = useState();\n  const [myRating, setMyRating] = useState();\n\n  const onMyRatingChange = (selectedOption) => { setMyRating(selectedOption); }\n  const onFeedbackersStateChange = (selectedOption) => { setFeedbackersState(selectedOption); }\n\n  const renderFeedbackForm = (\n    <form id='feedbackForm' onSubmit={HandleCreateFeedback}>\n      <label>My rating </label>\n      <Select id=\"rating\" required onChange={onMyRatingChange} options={[\n        { value: 0, label: 0 },\n        { value: 1, label: 1 },\n        { value: 2, label: 2 },\n        { value: 3, label: 3 },\n        { value: 4, label: 4 },\n        { value: 5, label: 5 },\n        { value: 6, label: 6 },\n        { value: 7, label: 7 },\n        { value: 8, label: 8 },\n        { value: 9, label: 9 },\n        { value: 10, label: 10 }\n      ]} />\n      <label>My state</label>\n      <Select id=\"state\" required onChange={onFeedbackersStateChange} options={[\n        { value: \"INTEREST\", label: \"It looks interesting\" },\n        { value: \"DISINTEREST\", label: \"It's not interesting for me\" },\n        { value: \"SEEN_OR_PLAYED\", label: \"I have seen or played it already\" }\n      ]} />\n      <label>Commentary </label>\n      <textarea name=\"commentary\"></textarea>\n      <input type=\"submit\" />\n    </form>\n  )\n\n  const renderRecToMe = (rec, haveReacted) => (\n    <div>\n      {console.log(\"to me\")}\n      {console.log(rec)}\n      {(haveReacted) ? (<></>) : (<p className='newRecWarning'>UNRESPOND RECOMMENDATION</p>)}\n      <h5>{(rec.gameAddition) ? (<>Game </>) : (<></>)}Title: {rec.title}</h5>\n      {(rec.description) ? (<p>Description: {rec.description}</p>) : (<></>)}\n      From: {(rec.group) ? (<>{rec.group.name} ({rec.sender.username})</>) : (<>{rec.sender.username}</>)}<br/>\n      Sender rating: {rec.rating}/10<br/>\n      {(rec.gameAddition) ? (<>Percentage of played: {rec.gameAddition.progress * 100}<br/></>) : (<></>)}\n      Genres: {rec.genres.map(genre => <> {genre.name}</>)}<br/>\n      {(haveReacted) ? (rec.feedbacks.map(fb =>\n        <div>\n          <h5>Feedback: </h5> <p> From: {fb.user.username}{(fb.user.id === dataUser.userIfCorrectPassword.id) ? (<>(me)</>) : (<></>)}, Feedbacker's state: {fb.state}, Rating: {fb.rating} <br/>\n          Commentary: {fb.commentary}</p>\n        </div>\n      )) : (\n        <div>\n          My feedback: {(rec.id === recToFeedback) ? (renderFeedbackForm) : (<Button onClick={() => setRecToFeedback(rec.id)}>Create Feedback</Button>)}\n        </div>\n      )}\n    </div>\n  )\n\n  const renderShowRecommendations = (\n    <div>\n      <h3>Recommendations:</h3>\n      <Button onClick={() => setToReloadRecommendations(true)}>Reload Recommendations</Button>\n      {\n        (loadingRecommendations || !dataRecommendations) ? (<p>Loading...</p>) : ((errorRecommendations) ? (<p>Error : {errorRecommendations.message}</p>) : (dataRecommendations.getUsersRecommendations.map(rec =>\n          <div>\n            <p>----</p>\n            {(rec.sender.id === dataUser.userIfCorrectPassword.id) ? (renderRecFromMe(rec)) : (renderRecToMe(rec, rec.feedbacks.find(fb => fb.user.id === dataUser.userIfCorrectPassword.id)))}\n            <p>----</p>\n          </div>\n        )))\n      }\n    </div>\n  )\n\n  const renderRecommendations = (\n    <div className='part'>\n      {(toCreateRecommendation) ? (renderCreateRecommendation) : (renderShowRecommendations)}\n      <div className=\"bottomPanel\">\n        <Button className=\"recommendationButton\" onClick={() => setToCreateRecommendation(!toCreateRecommendation)}>{(toCreateRecommendation) ? (<>Back to Recommendations</>) : (<>Create NEW Recommendation</>)}</Button>\n      </div>\n    </div>\n  )\n\n  const renderFriendsForms = (\n    <div className=\"bottomPanel\">\n      <h4>Manage Your Friends</h4>\n      <div className=\"addFriendForm\">\n        <form onSubmit={HandleAddFriend}>\n          <label>add user: </label>\n          <input type=\"text\" name=\"username\" required />\n          {renderErrorMessage(\"noSuchUser\")}\n          {renderErrorMessage(\"yourUsername\")}\n          {renderErrorMessage(\"alreadyYourFriend\")}\n          <div className=\"button-container\">\n            <input type=\"submit\" />\n          </div>\n        </form>\n      </div>\n      <div className=\"removeFriendForm\">\n        <form onSubmit={HandleRemoveFriend}>\n          <label>remove friend: </label>\n          <input type=\"text\" name=\"username\" required />\n          {renderErrorMessage(\"notYourFriend\")}\n          <div className=\"button-container\">\n            <input type=\"submit\" />\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n\n  const renderFriends = (\n    <div className='part'>\n      <h3>Your Friends:</h3>\n      {\n        (loadingFriends || !dataFriends) ? (<p>Loading...</p>) : ((errorFriends) ? (<p>Error : {errorFriends.message}</p>) : (dataFriends.getFriends.map(user =>\n          <p>{user.username}</p>\n        )))\n      }\n      {(!toReloadFriends && !loadingFriends && dataFriends && dataFriends.getFriends) ? (renderFriendsForms) : (<>Loading...</>)}\n    </div>\n  )\n\n  const renderAllGroups = (\n    <div>\n      <h3>Your Groups:</h3>\n      <div>\n        {\n          (loadingGroups || !dataGroups) ? (<p>Loading...</p>) : ((errorGroups) ? (<p>Error : {errorGroups.message}</p>) : (dataGroups.getUsersGroups.map(group =>\n            <Button className=\"groupButton\" onClick={() => setSelectedGroup(group)}>{group.name}</Button>\n          )))\n        }\n      </div>\n    </div>\n  )\n\n  const renderSelectedGroup = (\n    <div>\n      <Button className=\"backToAllGroups\" onClick={() => setSelectedGroup(\"\")}>&#60; back to all groups</Button>\n      <Button className=\"leaveGroup\" onClick={HandleLeaveGroup}>Leave group</Button>\n      <h3>Group: {selectedGroup.name}</h3>\n      <div>\n        {\n          (loadingGroupsMembers || !dataGroupsMembers) ? (<p>Loading...</p>) : ((errorGroupsMembers) ? (<p>Error: {errorGroupsMembers.message}</p>) : (dataGroupsMembers.getMembersOfGroup.map(member =>\n            <p>{member.username}</p>\n          )))\n        }\n      </div>\n    </div>\n  )\n\n  const renderCreateGroup = (\n    <div>\n      <h4>Create new group</h4>\n      <form onSubmit={HandleCreateGroup}>\n        <label>name of your new group: </label>\n        <input type=\"text\" name=\"groupname\" required />\n        {renderErrorMessage(\"existingGroup\")}\n        <div className=\"button-container\">\n          <input type=\"submit\" />\n        </div>\n      </form>\n    </div>\n  )\n\n  const renderAddUserToGroup = (\n    <div>\n      <h4>Add User To {selectedGroup.name}</h4>\n      <div className=\"addUserToGroupForm\">\n        <form onSubmit={HandleAddUserToGroup}>\n          <label>\n            Pick your friend:\n            <select id=\"addFriendToThisGroupSelect\">\n              {\n                (loadingFriends || !dataFriends) ? (<p>Loading...</p>) : ((errorFriends) ? (<p>Error : {errorFriends.message}</p>) : (dataFriends.getFriends.map(user =>\n                  <option value={user.id}>{user.username}</option>\n                )))\n              }\n            </select>\n          </label>\n          {renderErrorMessage(\"alreadyInGroup\")}\n          <div className=\"button-container\">\n            <input type=\"submit\" />\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n\n  const renderGroups = (\n    <div className=\"part\">\n      {(selectedGroup === \"\") ? (renderAllGroups) : (renderSelectedGroup)}\n      <div className=\"bottomPanel\">\n        {(selectedGroup === \"\") ? (renderCreateGroup) : ((loadingAddUserToGroup) ? (<></>) : (renderAddUserToGroup))}\n      </div>\n    </div>\n  )\n\n  const renderUserIsLoginComponent = (\n    <div key=\"userIsLoginComponent\" className=\"user-is-login\">\n      {(link === \"\" || link === \"recommendations\")\n        ? (renderRecommendations)\n        : ((link === \"friends\") ? (renderFriends) : (renderGroups))}\n    </div>\n  );\n\n\n\n  //CODE\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error : {error.message}</p>;\n  let toReturn;\n\n  if (isLoginForm) {\n    //console.log(\"login form\");\n    if (isEnteredPassword && !isEnteredCorrectPassword && errorMessages.name != \"wrongPassword\") setErrorMessages({ name: \"wrongPassword\", message: errors.wrongPassword })\n    if (isEnteredPassword && isEnteredCorrectPassword && !loadingFriends && !dataFriends) {\n      getFriends({ variables: { id: dataUser.userIfCorrectPassword.id } });\n      getGroups({ variables: { id: dataUser.userIfCorrectPassword.id } });\n      getRecommendations({ variables: { id: dataUser.userIfCorrectPassword.id } });\n    }\n    if (toReloadFriends && !loadingAddFriend && !loadingRemoveFriend) {\n      console.log(\"reload friends\");\n      refetchFriends({ id: dataUser.userIfCorrectPassword.id });\n      setToReloadFriends(false);\n    }\n    if (toReloadGroups && !loadingCreateGroup && !loadingLeaveGroup) {\n      setToReloadGroups(false);\n\n      if ((dataCreateGroup && dataCreateGroup.createGroup) || (leftGroup)) {\n        refetchGroups({ variables: { id: dataUser.userIfCorrectPassword.id } });\n        if (leftGroup) setLeftGroup(false);\n      }\n      else setErrorMessages({ name: \"existingGroup\", message: errors.existingGroup });\n    }\n    if (toReloadRecommendations && !loadingCreateFeedback) {\n      setToReloadRecommendations(false);\n      refetchRecommendations({ id: dataUser.userIfCorrectPassword.id });\n    }\n    if (selectedGroup != \"\" && fetchedGroupMembersName != selectedGroup.name && !loadingAddUserToGroup) {\n      setFetchedGroupMembersName(selectedGroup.name);\n      if (dataGroupsMembers) refetchGroupsMembers({ id: selectedGroup.id });\n      else getGroupsMembers({ variables: { id: selectedGroup.id } });\n    }\n    toReturn = (\n      <div>\n        {(isEnteredPassword && isEnteredCorrectPassword) ? (renderUserIsLoginComponent) : (renderLoginForm)}\n      </div>\n    )\n  }\n  else {\n    //console.log(\"signin form\");\n    toReturn = (\n      <div className=\"signin-form\">\n        <div className=\"title\">Sign In</div>\n        {(isSignin) ? <div>User is successfully signed in</div> : (renderSigninForm)}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"app\">\n      <Container fluid className=\"upperPanel\">\n        <Row>\n          <Col>{(isEnteredPassword && isEnteredCorrectPassword) ? (renderNav) : (<>Need to login</>)}</Col>\n          <Col xs=\"auto\" className=\"buttonHolder\">\n            {(isEnteredPassword && isEnteredCorrectPassword)\n              ? (<Button className=\"logOutButton\" onClick={(e) => HandleLogOut(e)}>Log out</Button>)\n              : (<Button className=\"changeFormButton\" onClick={(e) => HandleChangeLoginSigin(e)}>{(isLoginForm) ? (<>Sign in</>) : (<>Log in</>)}</Button>)}\n          </Col>\n        </Row>\n      </Container>\n      <div className=\"mainPanel\">{toReturn}</div>\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <InitialData />\n  )\n}\nexport default App;","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/SongCard.js",[],{"ruleId":"57","severity":1,"message":"58","line":3,"column":55,"nodeType":"59","messageId":"60","endLine":3,"endColumn":65},{"ruleId":"57","severity":1,"message":"61","line":3,"column":67,"nodeType":"59","messageId":"60","endLine":3,"endColumn":75},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"57","severity":1,"message":"66","line":1,"column":8,"nodeType":"59","messageId":"60","endLine":1,"endColumn":12},{"ruleId":"57","severity":1,"message":"67","line":4,"column":17,"nodeType":"59","messageId":"60","endLine":4,"endColumn":26},{"ruleId":"57","severity":1,"message":"68","line":5,"column":8,"nodeType":"59","messageId":"60","endLine":5,"endColumn":16},{"ruleId":"57","severity":1,"message":"69","line":12,"column":8,"nodeType":"59","messageId":"60","endLine":12,"endColumn":19},{"ruleId":"57","severity":1,"message":"70","line":15,"column":7,"nodeType":"59","messageId":"60","endLine":15,"endColumn":19},{"ruleId":"57","severity":1,"message":"71","line":20,"column":7,"nodeType":"59","messageId":"60","endLine":20,"endColumn":19},{"ruleId":"57","severity":1,"message":"72","line":224,"column":46,"nodeType":"59","messageId":"60","endLine":224,"endColumn":61},{"ruleId":"57","severity":1,"message":"73","line":225,"column":46,"nodeType":"59","messageId":"60","endLine":225,"endColumn":61},{"ruleId":"57","severity":1,"message":"74","line":226,"column":60,"nodeType":"59","messageId":"60","endLine":226,"endColumn":69},{"ruleId":"57","severity":1,"message":"75","line":227,"column":60,"nodeType":"59","messageId":"60","endLine":227,"endColumn":72},{"ruleId":"57","severity":1,"message":"76","line":231,"column":60,"nodeType":"59","messageId":"60","endLine":231,"endColumn":74},{"ruleId":"57","severity":1,"message":"77","line":231,"column":82,"nodeType":"59","messageId":"60","endLine":231,"endColumn":95},{"ruleId":"57","severity":1,"message":"78","line":232,"column":66,"nodeType":"59","messageId":"60","endLine":232,"endColumn":83},{"ruleId":"57","severity":1,"message":"79","line":232,"column":91,"nodeType":"59","messageId":"60","endLine":232,"endColumn":107},{"ruleId":"57","severity":1,"message":"80","line":233,"column":64,"nodeType":"59","messageId":"60","endLine":233,"endColumn":80},{"ruleId":"57","severity":1,"message":"81","line":234,"column":62,"nodeType":"59","messageId":"60","endLine":234,"endColumn":77},{"ruleId":"57","severity":1,"message":"82","line":234,"column":85,"nodeType":"59","messageId":"60","endLine":234,"endColumn":99},{"ruleId":"57","severity":1,"message":"83","line":237,"column":70,"nodeType":"59","messageId":"60","endLine":237,"endColumn":89},{"ruleId":"57","severity":1,"message":"84","line":237,"column":97,"nodeType":"59","messageId":"60","endLine":237,"endColumn":115},{"ruleId":"57","severity":1,"message":"85","line":238,"column":46,"nodeType":"59","messageId":"60","endLine":238,"endColumn":73},{"ruleId":"57","severity":1,"message":"86","line":238,"column":82,"nodeType":"59","messageId":"60","endLine":238,"endColumn":107},{"ruleId":"57","severity":1,"message":"87","line":238,"column":115,"nodeType":"59","messageId":"60","endLine":238,"endColumn":139},{"ruleId":"57","severity":1,"message":"88","line":239,"column":70,"nodeType":"59","messageId":"60","endLine":239,"endColumn":89},{"ruleId":"57","severity":1,"message":"89","line":239,"column":97,"nodeType":"59","messageId":"60","endLine":239,"endColumn":115},{"ruleId":"90","severity":1,"message":"91","line":240,"column":63,"nodeType":"92","messageId":"93","endLine":240,"endColumn":65},{"ruleId":"90","severity":1,"message":"94","line":242,"column":35,"nodeType":"92","messageId":"93","endLine":242,"endColumn":37},{"ruleId":"90","severity":1,"message":"94","line":297,"column":20,"nodeType":"92","messageId":"93","endLine":297,"endColumn":22},{"ruleId":"90","severity":1,"message":"94","line":352,"column":74,"nodeType":"92","messageId":"93","endLine":352,"endColumn":76},{"ruleId":"90","severity":1,"message":"91","line":362,"column":18,"nodeType":"92","messageId":"93","endLine":362,"endColumn":20},{"ruleId":"90","severity":1,"message":"91","line":798,"column":78,"nodeType":"92","messageId":"93","endLine":798,"endColumn":80},{"ruleId":"90","severity":1,"message":"91","line":822,"column":23,"nodeType":"92","messageId":"93","endLine":822,"endColumn":25},{"ruleId":"90","severity":1,"message":"91","line":822,"column":56,"nodeType":"92","messageId":"93","endLine":822,"endColumn":58},"no-unused-vars","'ApolloLink' is defined but never used.","Identifier","unusedVar","'HttpLink' is defined but never used.","no-native-reassign",["95"],"no-negated-in-lhs",["96"],"'logo' is defined but never used.","'useEffect' is defined but never used.","'SongCard' is defined but never used.","'NavDropdown' is defined but never used.","'initialState' is assigned a value but never used.","'GET_BOOK_ONE' is assigned a value but never used.","'errorFilmGenres' is assigned a value but never used.","'errorGameGenres' is assigned a value but never used.","'errorUser' is assigned a value but never used.","'errorAddUser' is assigned a value but never used.","'errorAddFriend' is assigned a value but never used.","'dataAddFriend' is assigned a value but never used.","'errorRemoveFriend' is assigned a value but never used.","'dataRemoveFriend' is assigned a value but never used.","'errorCreateGroup' is assigned a value but never used.","'errorLeaveGroup' is assigned a value but never used.","'dataLeaveGroup' is assigned a value but never used.","'errorAddUserToGroup' is assigned a value but never used.","'dataAddUserToGroup' is assigned a value but never used.","'loadingCreateRecommendation' is assigned a value but never used.","'errorCreateRecommendation' is assigned a value but never used.","'dataCreateRecommendation' is assigned a value but never used.","'errorCreateFeedback' is assigned a value but never used.","'dataCreateFeedback' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]