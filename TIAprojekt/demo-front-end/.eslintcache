[{"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/index.js":"1","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/reportWebVitals.js":"2","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/App.js":"3","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/SongCard.js":"4"},{"size":790,"mtime":1679498045511,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1679414982637,"results":"7","hashOfConfig":"6"},{"size":4705,"mtime":1680195500336,"results":"8","hashOfConfig":"6"},{"size":549,"mtime":1679415620117,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"w7vjyh",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/index.js",["20"],"import React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:3000/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n\nroot.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/reportWebVitals.js",[],"/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/App.js",["21","22","23","24","25","26","27","28","29","30","31","32","33","34"],"import logo from './logo.svg';\nimport './App.css';\nimport { useQuery, gql, useLazyQuery } from '@apollo/client';\nimport React, { useEffect, useState } from 'react'\nimport SongCard from './SongCard';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nconst initialState = {\n  isLoading: true,\n  usernames: []\n}\n\nconst GET_BOOK_ONE = gql`\n    query bookDetails {\n      bookById(id: \"book-1\") {\n        id\n        name\n        pageCount\n        author {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n`;\n\nconst GET_ALL_USERNAMES = gql`\nquery allUsernames {\n  getAllUserNames\n}\n`;\nconst GET_USER_IF_CORRECT_PASSWORD = gql`\nquery getUserIfCorrectPassword($userName: String!, $password: String!) {\n  userIfCorrectPassword(userName: $userName, password: $password){\n    id\n    userName\n    password\n    isAdmin\n  }\n}\n`;\n\nfunction DisplayBook() {\n  const { loading, error, data } = useQuery(GET_BOOK_ONE);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error : {error.message}</p>;\n  console.log(data.bookById);\n  return (\n    <div key={data.bookById.id}>\n      <h3>{data.bookById.name}</h3>\n      <br />\n      <b>About this book:</b>\n      <p>page count:{data.bookById.pageCount}, author: {data.bookById.author.firstName} {data.bookById.author.lastName}</p>\n      <br />\n    </div>\n  );\n}\n\n\nfunction InitialData() {\n  const errors = {\n    uname: \"invalid username\",\n    pass: \"invalid password\",\n    waitForResponseAboutPassword: \"wait\"\n  };\n\n  const [errorMessages, setErrorMessages] = useState({});\n  const { loading, error, data } = useQuery(GET_ALL_USERNAMES);\n  const [getUserByPassword, { loading: loadingUser, error: errorUser, data: dataUser }] = useLazyQuery(GET_USER_IF_CORRECT_PASSWORD);\n  const isEnteredPassword = loadingUser == false && dataUser != undefined;\n  const isEnteredCorrectPassword = isEnteredPassword && dataUser.userIfCorrectPassword != null\n\n  const HandleSubmit = (event) => {\n    event.preventDefault();\n    var { uname, pass } = document.forms[0];\n\n    const userData = data.getAllUserNames.find((user) => user === uname.value);\n\n    if (userData) {\n      console.log(\"Should be set\" + uname.value + \" \" + pass.value);\n      getUserByPassword({ variables: { userName: uname.value, password: pass.value } });\n    } else {\n      setErrorMessages({ name: \"uname\", message: errors.uname });\n    }\n  }\n\n  const renderErrorMessage = (name) =>\n    name === errorMessages.name && (\n      <div className=\"error\">{errorMessages.message}</div>\n    );\n\n  const renderLoginForm = (\n    <div className=\"form\">\n      <form onSubmit={HandleSubmit}>\n        {renderErrorMessage(\"waitForResponseAboutPassword\")}\n        <div className=\"input-container\">\n          <label>Username </label>\n          <input type=\"text\" name=\"uname\" required />\n          {renderErrorMessage(\"uname\")}\n        </div>\n        <div className=\"input-container\">\n          <label>Password </label>\n          <input type=\"password\" name=\"pass\" required />\n          {renderErrorMessage(\"pass\")}\n        </div>\n        <div className=\"button-container\">\n          <input type=\"submit\"/>\n        </div>\n      </form>\n    </div>\n  );\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error : {error.message}</p>;\n  if (isEnteredPassword && !isEnteredCorrectPassword && errorMessages.name != \"pass\") setErrorMessages({ name: \"pass\", message: errors.pass })\n  return (\n    <div className=\"login-form\">\n      <div className=\"title\">Sign In</div>\n      {(isEnteredPassword && isEnteredCorrectPassword) ? <div>User is successfully logged in</div> : (renderLoginForm)}\n    </div>\n  )\n}\n\nconst App = () => {\n  {/*const [data, setData] = useState(initialState)\n\n  const getData = async () => {\n    const response = await fetch('/api/songs');\n    const body = await response.json()\n    setData({ songs: body, isLoading: false })\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])*/}\n\n\n\n  {/*\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Container>\n        \n          <div className=\"App-intro\">\n          <h2 style={{color: 'white'}}>Song List</h2>\n          <hr></hr>\n          <Row>\n          {data.songs.map(song =>\n              <Col>\n                 <SongCard key={song.id} song={song} />\n              </Col>\n           \n          )}\n          </Row>\n        </div>\n          \n      </Container>\n        \n      </header>\n      <div>\n        <h2>My first Apollo app ðŸš€</h2>\n        <br/>\n        <DisplayBook />\n      </div>\n      */}\n\n  return (\n    <div className=\"App\">\n      <InitialData />\n    </div>\n\n  )\n}\nexport default App;","/Users/jakubdunik/FMFI_TIA_projekt/TIAprojekt/demo-front-end/src/SongCard.js",[],{"ruleId":"35","severity":1,"message":"36","line":3,"column":55,"nodeType":"37","messageId":"38","endLine":3,"endColumn":58},{"ruleId":"35","severity":1,"message":"39","line":1,"column":8,"nodeType":"37","messageId":"38","endLine":1,"endColumn":12},{"ruleId":"35","severity":1,"message":"40","line":4,"column":17,"nodeType":"37","messageId":"38","endLine":4,"endColumn":26},{"ruleId":"35","severity":1,"message":"41","line":5,"column":8,"nodeType":"37","messageId":"38","endLine":5,"endColumn":16},{"ruleId":"35","severity":1,"message":"42","line":6,"column":8,"nodeType":"37","messageId":"38","endLine":6,"endColumn":17},{"ruleId":"35","severity":1,"message":"43","line":7,"column":8,"nodeType":"37","messageId":"38","endLine":7,"endColumn":11},{"ruleId":"35","severity":1,"message":"44","line":8,"column":8,"nodeType":"37","messageId":"38","endLine":8,"endColumn":11},{"ruleId":"35","severity":1,"message":"45","line":10,"column":7,"nodeType":"37","messageId":"38","endLine":10,"endColumn":19},{"ruleId":"35","severity":1,"message":"46","line":46,"column":10,"nodeType":"37","messageId":"38","endLine":46,"endColumn":21},{"ruleId":"35","severity":1,"message":"47","line":73,"column":60,"nodeType":"37","messageId":"38","endLine":73,"endColumn":69},{"ruleId":"48","severity":1,"message":"49","line":74,"column":41,"nodeType":"50","messageId":"51","endLine":74,"endColumn":43},{"ruleId":"48","severity":1,"message":"52","line":74,"column":62,"nodeType":"50","messageId":"51","endLine":74,"endColumn":64},{"ruleId":"48","severity":1,"message":"52","line":118,"column":76,"nodeType":"50","messageId":"51","endLine":118,"endColumn":78},{"ruleId":"53","severity":1,"message":"54","line":128,"column":3,"nodeType":"55","messageId":"56","endLine":138,"endColumn":12},{"ruleId":"53","severity":1,"message":"54","line":142,"column":3,"nodeType":"55","messageId":"56","endLine":168,"endColumn":10},"no-unused-vars","'gql' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'useEffect' is defined but never used.","'SongCard' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'initialState' is assigned a value but never used.","'DisplayBook' is defined but never used.","'errorUser' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock"]