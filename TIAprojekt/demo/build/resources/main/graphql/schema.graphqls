scalar Date
scalar LocalDate
scalar LocalDateTime
scalar LocalTime
scalar OffsetDateTime
scalar YearMonth
scalar Duration

type Book {
    id: ID
    name: String
    pageCount: Int
    author: Author}
type Author {
    id: ID
    firstName: String
    lastName: String}


type Query {
    bookById(id: ID!): Book

    getAllUsernames: [String]
    userIfCorrectPassword(username: String!, password: String!): User
    getFriends(id: Int!): [UserInfo]
    getUsersGroups(id: Int!): [Group]
    getMembersOfGroup(id: Int!): [UserInfo]
    getUsersRecommendations(userId: Int!): [Recommendation]
}

type Mutation {
    addUser(username: String!, password: String!): User
    addAdmin(username: String!, password: String!): User

    addFriend(id: Int!, username: String!): Boolean
    removeFriend(id: Int!, username: String!): Boolean

    createGroup(id: Int!, groupname: String!): Boolean
    leaveGroup(userid: Int!, groupid: Int!): Boolean

    addUserToGroup(userid: Int!, groupid: Int!): Boolean
}

type User {
    id: ID!
    username: String!
    password: String!
    isAdmin: Boolean!
}

type UserInfo {
    id: ID!
    username: String!
}

type Group {
    id: ID!
    name: String!
}

type Friend {
    userOne: User!
    userTwo: User!
}

type Member {
    group: Group!
    user: User!
}

type Recommendation {
    id: ID!
    sender: UserInfo!
    group: Group
    receiver: UserInfo
    title: String!
    description: String
    rating: Int!
    gameAddition: GameAddition
    postTime: LocalDateTime!
    genres: [Genre]!
}

type Genre {
    id: ID!
    name: String!
}

type GameAddition {
    playedTime: Duration!
    overallTime: Duration
}

enum FeedbackerState {
    DISINTEREST
    INTEREST
    SEEN_OR_PLAYED
}

type Feedback {
    id: ID!
    user: User!
    recommendation: Recommendation!
    state: FeedbackerState!
    rating: Int!
    commentary: String
}
